defaults: &defaults
  working_directory: ~/workspace
  docker:
    - image: cimg/base:2021.10
main_branch: &main_branch
  filters:
    branches:
      only: main
feature_branch: &feature_branch
  filters:
    branches:
      ignore: main

version: 2.1

orbs:
  hmpps: ministryofjustice/hmpps@3.11

commands:
  release_to_namespace:
    description: "Release with Helm"
    parameters:
      environment:
        type: string
    steps:
      - checkout:
          path: ~/git
      - attach_workspace:
          at: /tmp/build-info
      - hmpps/k8s_setup
      - hmpps/install_helm
      - run:
          name: Release to << parameters.environment >>
          command: |
            VERSION_TO_DEPLOY=$(cat /tmp/build-info/version-to-deploy.txt)
            sed -i "s/appVersion:.*/appVersion: \"${VERSION_TO_DEPLOY}\"/g" ~/git/helm_deploy/prisoner-content-hub-backend/Chart.yaml
            kubectl -n ${KUBE_NAMESPACE} get secret ip-allowlist -o json | jq '{ ingress: { jsonapi: { allowed: .data |  map_values(@base64d) } } } ' | \
            helm upgrade ${HELM_BACKEND_RELEASE_NAME} ~/git/helm_deploy/prisoner-content-hub-backend \
              --install --wait --reset-values --timeout 1500s \
              --namespace=${KUBE_NAMESPACE} \
              --values ~/git/helm_deploy/prisoner-content-hub-backend/values.<< parameters.environment >>.yaml \
              --values - \
              --set image.tag=${VERSION_TO_DEPLOY} \
              --set cronToken=${HELM_BACKEND_CRON_TOKEN} \
              --set application.sentry_dsn="${DRUPAL_SENTRY_DSN}" \
              --set application.sentry_environment="${SENTRY_ENVIRONMENT}" \
              --set application.sentry_release="${CIRCLE_BUILD_NUM}"
          no_output_timeout: 1500

jobs:
  run_tests:
    <<: *defaults
    parameters:
      docker-compose-filename:
        default: docker-compose.yml
        type: string
      docker-image-name-backend:
        default: drupal
        type: string
    steps:
      - checkout
      - setup_remote_docker:
          version: default
          docker_layer_caching: true
      - run:
          name: Build docker images with docker compose
          command: |
            set -x
            docker-compose -f << parameters.docker-compose-filename >> up -d --build
      - run:
          name: Wait for mysql service to come up
          command: |
            docker-compose -f << parameters.docker-compose-filename >> exec << parameters.docker-image-name-backend >> /bin/bash -c \
            'while ! mysqladmin ping -h"$HUB_DB_PORT_3306_TCP_ADDR" --silent; do sleep 1; done'
      - run:
          name: Create S3 bucket in localstack
          command: |
            set -x
            docker-compose -f << parameters.docker-compose-filename >> exec localstack awslocal s3 mb s3://localstack-s3
      - run:
          name: Install Drupal and run tests
          command: |
            set -x
            docker-compose -f << parameters.docker-compose-filename >> exec << parameters.docker-image-name-backend >> make coding-standards
            docker-compose -f << parameters.docker-compose-filename >> exec << parameters.docker-image-name-backend >> make php-stan
            docker-compose -f << parameters.docker-compose-filename >> exec << parameters.docker-image-name-backend >> make install-drupal
            docker-compose -f << parameters.docker-compose-filename >> exec << parameters.docker-image-name-backend >> make run-tests
      - run:
          name: Copy test results output
          command: |
            set -x
            mkdir ~/phpunit
            docker cp $(docker-compose -f << parameters.docker-compose-filename >> ps -q << parameters.docker-image-name-backend >>):/var/www/phpunit ~/phpunit
      - store_test_results:
          path: ~/phpunit
      - store_artifacts:
          path: ~/phpunit

  build_preview:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          version: default
          docker_layer_caching: true
      - hmpps/create_app_version
      - run:
          name: Build Docker image
          command: make build
      - run:
          name: Push Docker image
          command: make push-preview
      - run:
          name: Persist build number for deployment
          command: |
            mkdir -p /tmp/build-info
            echo ${APP_VERSION} > /tmp/build-info/version-to-deploy.txt
      - persist_to_workspace:
          root: /tmp/build-info
          paths:
            - version-to-deploy.txt
  build_production:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          version: default
          docker_layer_caching: true
      - hmpps/create_app_version
      - run:
          name: Build Docker image
          command: make build
      - run:
          name: Push Docker image
          command: make push
      - add_ssh_keys:
          fingerprints:
            - "4b:3f:8b:a1:79:40:2f:5c:9b:b4:d9:7b:72:da:7b:53"
      - run:
          name: Create Git Tag
          command: |
            git config user.name "Circle CI"
            git config user.email "circle@circleci.com"
            git tag -a "$(date '+%Y-%m-%d')-$CIRCLE_BUILD_NUM" $CIRCLE_SHA1 -m "$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=%B)"
            git push origin "$(date '+%Y-%m-%d')-$CIRCLE_BUILD_NUM"
      - run:
          name: Persist build number for deployment
          command: |
            mkdir -p /tmp/build-info
            echo ${APP_VERSION} > /tmp/build-info/version-to-deploy.txt
      - persist_to_workspace:
          root: /tmp/build-info
          paths:
            - version-to-deploy.txt

  deploy_cloud_platform_development_preview:
    <<: *defaults
    steps:
      - release_to_namespace:
          environment: "development"

  deploy_cloud_platform_development:
    <<: *defaults
    steps:
      - release_to_namespace:
          environment: "development"

  deploy_cloud_platform_staging:
    <<: *defaults
    steps:
      - release_to_namespace:
          environment: "staging"

  deploy_cloud_platform_production:
    <<: *defaults
    steps:
      - release_to_namespace:
          environment: "production"

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - run_tests
      - build_preview:
          <<: *feature_branch

      - approve_preview_build:
          <<: *feature_branch
          type: approval
          requires:
            - build_preview

      - deploy_cloud_platform_development_preview:
          <<: *feature_branch
          context: prisoner-content-hub-development
          requires:
            - approve_preview_build

      - build_production:
          <<: *main_branch

      - approve_deploy_development:
          <<: *main_branch
          type: approval
          requires:
            - build_production

      - deploy_cloud_platform_development:
          <<: *main_branch
          context: prisoner-content-hub-development
          requires:
            - approve_deploy_development

      - approve_deploy_staging:
          <<: *main_branch
          type: approval
          requires:
            - build_production

      - deploy_cloud_platform_staging:
          <<: *main_branch
          context: prisoner-content-hub-staging
          requires:
            - approve_deploy_staging

      - approve_deploy_production:
          <<: *main_branch
          type: approval
          requires:
            - deploy_cloud_platform_staging

      - deploy_cloud_platform_production:
          <<: *main_branch
          context: prisoner-content-hub-prod
          requires:
            - approve_deploy_production
