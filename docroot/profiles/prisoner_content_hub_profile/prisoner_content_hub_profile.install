<?php

use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;

const PRISONER_CONTENT_HUB_PROFILE_BATCH_LIMIT = 20;

/**
 * Remove all moj_hub_item content, so that the content type can be removed.
 */
function prisoner_content_hub_profile_update_8001() {
  $query = \Drupal::entityQuery('node');
  $query->condition('type', 'moj_hub_item');
  $query->accessCheck(FALSE);
  $result = $query->execute();
  $nodes = Node::loadMultiple($result);
  foreach ($nodes as $node) {
    $node->delete();
  }
}

/**
 * Update content assigned to youth female.
 */
function prisoner_content_hub_profile_update_8010(&$sandbox) {

  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $query = \Drupal::entityQuery('node');
    // Get all nodes tagged with "Youth female".
    $query->condition('field_prison_categories', 1013);
    $query->accessCheck(FALSE);
    $sandbox['result'] = $query->execute();
  }

  $nodes = Node::loadMultiple(array_slice($sandbox['result'], $sandbox['progress'], 100, TRUE));

  foreach ($nodes as $node) {
    /** @var \Drupal\node\NodeInterface $node */
    $current_prison_categories = $node->get('field_prison_categories')->getValue();
    $new_prison_categories = [];
    $has_adult_female = FALSE;
    foreach ($current_prison_categories as $key => $value) {
      if ($value['target_id'] != 1013) {
        $new_prison_categories[] = $value;
      }
      if ($value['target_id'] == 1012) {
        $has_adult_female = TRUE;
      }
    }
    // Ensure that Adult female is tagged.
    if (!$has_adult_female) {
      $new_prison_categories[] = ['target_id' => 1012];
    }

    $node->set('field_prison_categories', $new_prison_categories);
    $node->save();
    $sandbox['progress']++;
  }
  $sandbox['#finished'] = $sandbox['progress'] >= count($sandbox['result']);
  return 'Processed nodes: ' . $sandbox['progress'];
}

/**
 * Update terms assigned to youth female.
 */
function prisoner_content_hub_profile_update_8012(&$sandbox) {

  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $query = \Drupal::entityQuery('taxonomy_term');
    // Get all nodes tagged with "Youth female".
    $query->condition('field_prison_categories', 1013);
    $query->accessCheck(FALSE);
    $sandbox['result'] = $query->execute();
  }

  $terms = Term::loadMultiple(array_slice($sandbox['result'], $sandbox['progress'], PRISONER_CONTENT_HUB_PROFILE_BATCH_LIMIT, TRUE));

  foreach ($terms as $term) {
    /** @var \Drupal\taxonomy\TermInterface $term */
    $current_prison_categories = $term->get('field_prison_categories')->getValue();
    $new_prison_categories = [];
    $has_adult_female = FALSE;
    foreach ($current_prison_categories as $key => $value) {
      if ($value['target_id'] != 1013) {
        $new_prison_categories[] = $value;
      }
      if ($value['target_id'] == 1012) {
        $has_adult_female = TRUE;
      }
    }
    // Ensure that Adult female is tagged.
    if (!$has_adult_female) {
      $new_prison_categories[] = ['target_id' => 1012];
    }

    $term->set('field_prison_categories', $new_prison_categories);
    $term->save();
    $sandbox['progress']++;
  }
  $sandbox['#finished'] = $sandbox['progress'] >= count($sandbox['result']);
  return 'Processed terms: ' . $sandbox['progress'];
}

/**
 * Update missing file usage db records.
 *
 * See https://trello.com/c/TQHhdb4i/151-unable-to-edit-certain-videos-in-drupal
 */
function prisoner_content_hub_profile_update_8013() {
  /** @var \Drupal\file\FileUsage\FileUsageInterface $file_usage */
  $file_usage = Drupal::service('file.usage');

  // Find all field_video entries that do not have an entry in the file_usage table.
  //
  // We can't use an entity query here, as we need to use a specific
  // LEFT join to bring in the missing entries.
  $query = Drupal::database()->select('node__field_video', 'nfu');
  $query->addField('nfu', 'entity_id');
  $query->addField('nfu', 'field_video_target_id');
  $query->addJoin('LEFT OUTER', 'file_usage', 'fu', 'nfu.field_video_target_id = fu.fid');
  $query->where('fu.fid IS NULL');
  $result = $query->execute()->fetchAll();
  foreach ($result as $row) {
    $file = \Drupal\file\Entity\File::load($row->field_video_target_id);
    $file_usage->add($file, 'file', 'node', $row->entity_id);
  }
}

/**
 * Bulk update paths for content and taxonomy terms.
 */
function prisoner_content_hub_profile_update_8014(&$sandbox) {
  // See https://www.qed42.com/blog/url-alias-update-using-batch-api-drupal-8
  $entities = [];
  $entities['node'] = \Drupal::entityQuery('node')->execute();
  $entities['taxonomy_term'] = \Drupal::entityQuery('taxonomy_term')->condition('vid', ['moj_categories', 'series', 'tags'], 'IN')->execute();
  $result = [];

  foreach ($entities as $type => $entity_list) {
    foreach ($entity_list as $entity_id) {
      $result[] = [
        'entity_type' => $type,
        'id' => $entity_id,
      ];
    }
  }

  // Use the sandbox to store the information needed to track progression.
  if (!isset($sandbox['current']))
  {
    // The count of entities visited so far.
    $sandbox['current'] = 0;
    // Total entities that must be visited.
    $sandbox['max'] = count($result);
    // A place to store messages during the run.
  }

  // Process entities by groups of 20.
  // When a group is processed, the batch update engine determines
  // whether it should continue processing in the same request or provide
  // progress feedback to the user and wait for the next request.
  $limit = 20;
  $result = array_slice($result, $sandbox['current'], $limit);

  foreach ($result as $row) {
    $entity_storage = \Drupal::entityTypeManager()->getStorage($row['entity_type']);
    $entity = $entity_storage->load($row['id']);

    // Update Entity URL alias.
    \Drupal::service('pathauto.generator')->updateEntityAlias($entity, 'update');

    // Update our progress information.
    $sandbox['current']++;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['current'] / $sandbox['max']);

  if ($sandbox['#finished'] >= 1) {
    return t('The batch URL Alias update is finished.');
  }
  else {
    return 'Processed ' . $sandbox['current'];
  }

}
