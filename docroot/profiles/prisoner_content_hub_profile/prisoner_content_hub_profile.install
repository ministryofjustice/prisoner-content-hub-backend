<?php

use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;

const PRISONER_CONTENT_HUB_PROFILE_BATCH_LIMIT = 20;

/**
 * Remove all moj_hub_item content, so that the content type can be removed.
 */
function prisoner_content_hub_profile_update_8001() {
  $query = \Drupal::entityQuery('node');
  $query->condition('type', 'moj_hub_item');
  $query->accessCheck(FALSE);
  $result = $query->execute();
  $nodes = Node::loadMultiple($result);
  foreach ($nodes as $node) {
    $node->delete();
  }
}

/**
 * Update content assigned to youth female.
 */
function prisoner_content_hub_profile_update_8010(&$sandbox) {

  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $query = \Drupal::entityQuery('node');
    // Get all nodes tagged with "Youth female".
    $query->condition('field_prison_categories', 1013);
    $query->accessCheck(FALSE);
    $sandbox['result'] = $query->execute();
  }

  $nodes = Node::loadMultiple(array_slice($sandbox['result'], $sandbox['progress'], 100, TRUE));

  foreach ($nodes as $node) {
    /** @var \Drupal\node\NodeInterface $node */
    $current_prison_categories = $node->get('field_prison_categories')->getValue();
    $new_prison_categories = [];
    $has_adult_female = FALSE;
    foreach ($current_prison_categories as $key => $value) {
      if ($value['target_id'] != 1013) {
        $new_prison_categories[] = $value;
      }
      if ($value['target_id'] == 1012) {
        $has_adult_female = TRUE;
      }
    }
    // Ensure that Adult female is tagged.
    if (!$has_adult_female) {
      $new_prison_categories[] = ['target_id' => 1012];
    }

    $node->set('field_prison_categories', $new_prison_categories);
    $node->save();
    $sandbox['progress']++;
  }
  $sandbox['#finished'] = $sandbox['progress'] >= count($sandbox['result']);
  return 'Processed nodes: ' . $sandbox['progress'];
}

/**
 * Update terms assigned to youth female.
 */
function prisoner_content_hub_profile_update_8012(&$sandbox) {

  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $query = \Drupal::entityQuery('taxonomy_term');
    // Get all nodes tagged with "Youth female".
    $query->condition('field_prison_categories', 1013);
    $query->accessCheck(FALSE);
    $sandbox['result'] = $query->execute();
  }

  $terms = Term::loadMultiple(array_slice($sandbox['result'], $sandbox['progress'], PRISONER_CONTENT_HUB_PROFILE_BATCH_LIMIT, TRUE));

  foreach ($terms as $term) {
    /** @var \Drupal\taxonomy\TermInterface $term */
    $current_prison_categories = $term->get('field_prison_categories')->getValue();
    $new_prison_categories = [];
    $has_adult_female = FALSE;
    foreach ($current_prison_categories as $key => $value) {
      if ($value['target_id'] != 1013) {
        $new_prison_categories[] = $value;
      }
      if ($value['target_id'] == 1012) {
        $has_adult_female = TRUE;
      }
    }
    // Ensure that Adult female is tagged.
    if (!$has_adult_female) {
      $new_prison_categories[] = ['target_id' => 1012];
    }

    $term->set('field_prison_categories', $new_prison_categories);
    $term->save();
    $sandbox['progress']++;
  }
  $sandbox['#finished'] = $sandbox['progress'] >= count($sandbox['result']);
  return 'Processed terms: ' . $sandbox['progress'];
}

/**
 * Update missing file usage db records.
 *
 * See https://trello.com/c/TQHhdb4i/151-unable-to-edit-certain-videos-in-drupal
 */
function prisoner_content_hub_profile_update_8013() {
  /** @var \Drupal\file\FileUsage\FileUsageInterface $file_usage */
  $file_usage = Drupal::service('file.usage');

  // Find all field_video entries that do not have an entry in the file_usage table.
  //
  // We can't use an entity query here, as we need to use a specific
  // LEFT join to bring in the missing entries.
  $query = Drupal::database()->select('node__field_video', 'nfu');
  $query->addField('nfu', 'entity_id');
  $query->addField('nfu', 'field_video_target_id');
  $query->addJoin('LEFT OUTER', 'file_usage', 'fu', 'nfu.field_video_target_id = fu.fid');
  $query->where('fu.fid IS NULL');
  $result = $query->execute()->fetchAll();
  foreach ($result as $row) {
    $file = \Drupal\file\Entity\File::load($row->field_video_target_id);
    $file_usage->add($file, 'file', 'node', $row->entity_id);
  }
}

/**
 * Update content assigned with more than one series, to be part of just one
 * series.
 */
function prisoner_content_hub_profile_update_8014() {
  $query = \Drupal::entityQuery('node')->condition('field_moj_series.%delta', 0, '>')->accessCheck(FALSE);
  $results = $query->execute();
  $nodes = Node::loadMultiple($results);
  /** @var \Drupal\node\NodeInterface $node */
  foreach ($nodes as $node) {
    $field_value = $node->get('field_moj_series')->get(0)->getValue();
    $node->set('field_moj_series', $field_value);
    $node->save();
  }
}


/**
 * Remove all landing pages (so that we can remove the content type).
 */
function prisoner_content_hub_profile_update_8015() {
  $results = \Drupal::entityQuery('node')->condition('type', 'landing_page')->accessCheck(FALSE)->execute();
  $nodes = Node::loadMultiple($results);
  /** @var \Drupal\node\NodeInterface $node */
  foreach ($nodes as $node) {
    $node->delete();
  }
}

/**
 * Remove old prison categories (so that we can remove the taxonomy vocabulary).
 */
function prisoner_content_hub_profile_update_8016() {
  $results = \Drupal::entityQuery('taxonomy_term')->condition('vid', 'prison_category')->accessCheck(FALSE)->execute();
  $terms = Term::loadMultiple($results);
  foreach ($terms as $term) {
    $term->delete();
  }

}

/**
 * Remove old taxonomy terms (so that we can remove the taxonomy vocabularies).
 */
function prisoner_content_hub_profile_update_8017() {
  $results = \Drupal::entityQuery('taxonomy_term')->condition('vid', ['step_by_step', 'location'], 'IN')->accessCheck(FALSE)->execute();
  $terms = Term::loadMultiple($results);
  foreach ($terms as $term) {
    $term->delete();
  }
}

/**
 * Update all content/series with more than one category.
 */
function prisoner_content_hub_profile_update_8018() {
  $result = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('field_moj_top_level_categories' . '.%delta', 1)
    ->execute();

  $entities = array_values(Node::loadMultiple($result));

  $result = \Drupal::entityQuery('taxonomy_term')
    ->accessCheck(FALSE)
    ->condition('field_category' . '.%delta', 1)
    ->execute();

  $entities = array_merge($entities, array_values(Term::loadMultiple($result)));

  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  foreach ($entities as $entity) {
    $new_category_value = [];
    $field_name = $entity->getEntityTypeId() == 'node' ? 'field_moj_top_level_categories' : 'field_category';
    $categories = $entity->get($field_name)->referencedEntities();
    foreach ($categories as $category) {
      if (!empty($category->get('parent')->getValue())) {
        // Only include sub-categories, not tier 1 categories.
        $new_category_value[] = ['target_id' => $category->id()];
        break;
      }
    }
    if ($entity->getEntityType()->isRevisionable()) {
      $entity->setNewRevision(TRUE);
      $entity->revision_log = 'Bulk updating content with more than one category.';
      $entity->setRevisionCreationTime(\Drupal::time()->getRequestTime());
    }

    $entity->set($field_name, $new_category_value);
    $entity->save();
  }
}

/**
 * Convert series into sub-categories.
 */
function prisoner_content_hub_profile_update_8019(&$sandbox) {

  // [Series id => destination parent category id]
  $series_to_sub_cats_map = [
    [1275 => 644],
    [1313 => 644],
    [849 => 1297],
    [916 => 1290],
    [918 => 1286],
    [920 => 1286],
    [921 => 1286],
    [922 => 1286],
    [923 => 1286],
    [925 => 1290],
    [929 => 1286],
    [932 => 1286],
    [941 => 1283],
    [942 => 1286],
    [944 => 1290],
    [953 => 1290],
    [1049 => 1283],
    [1054 => 1286],
    [1106 => 1283],
    [1174 => 1284],
    [1181 => 1297],
    [875 => 1310],
    [931 => 1286],
    [1271 => 644],
    [1196 => 1310],
    [810 => 1310],
    [1183 => 1283],
    [1316 => 1283],
    [911 => 1283],
    [1007 => 644],
    [1045 => 1283],
    [1146 => 1283],
    [1162 => 644],
    [1210 => 1283],
    [1211 => 1283],
    [1173 => 1310],
    [1108 => 1283],
    [912 => 1282],
    [1259 => 1282],
    [1260 => 1282],
    [1261 => 1282],
    [1263 => 1282],
    [1265 => 1282],
    [1267 => 1310],
    [1226 => 1297],
    [1247 => 644],
    [1028 => 1307],
    [1107 => 1283],
    [1148 => 644],
    [1239 => 1283],
    [1240 => 1283],
    [1241 => 1283],
    [1242 => 1283],
    [1243 => 1283],
    [1244 => 1283],
    [1245 => 1283],
    [1246 => 1283],
    [1252 => 1285],
    [1228 => 1283],
    [1229 => 1283],
    [1230 => 1283],
    [1231 => 1283],
    [1232 => 1283],
    [1233 => 1283],
    [1234 => 1283],
    [1235 => 1283],
    [1236 => 1283],
    [1237 => 1283],
    [1238 => 1283],
    [1352 => 1283],
    [948 => 1283],
    [1155 => 1284],
    [1189 => 1283],
    [1257 => 1283],
    [1258 => 1283],
    [1323 => 644],
    [1324 => 1300],
    [1353 => 1283],
    [1087 => 1283],
    [1342 => 1341],
    [917 => 1286],
  ];

  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
  }

  $series_to_sub_cats_slice = array_slice($series_to_sub_cats_map, $sandbox['progress'], 10, TRUE);

  foreach ($series_to_sub_cats_slice as $value) {
    $series_id = key($value);
    $parent_id = reset($value);
    $series_term = Term::load($series_id);
    $new_category_term = Term::create([
      'name' => $series_term->getName(),
      'vid' => 'moj_categories',
      'parent' => [
        'target_id' => $parent_id,
      ],
    ]);
    $new_category_term->save();

    $result = \Drupal::entityQuery('node')
      ->condition('field_moj_series', $series_id)
      ->accessCheck(FALSE)
      ->execute();
    $nodes = Node::loadMultiple($result);
    /** @var \Drupal\node\NodeInterface $node */
    foreach ($nodes as $node) {
      $node->set('field_moj_series', NULL);
      $node->set('field_not_in_series', 1);
      $node->set('field_moj_top_level_categories', $new_category_term->id());
      $node->save();
    }
    $series_term->delete();
    print 'Converted ' . $new_category_term->getName() . ' to sub-category';
    $sandbox['progress']++;
  }
  $sandbox['#finished'] = isset($series_to_sub_cats_map[$sandbox['progress']]) == FALSE;
  return 'Processed terms: ' . $sandbox['progress'];

}
