<?php

/**
 * @file
 * Primary hook implementations for Prisoner hub taxonomy sorting module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_entity_base_field_info().
 *
 * Create the series_sort_value base field.
 * Note that a one-off call to actually create the field is required.
 * See prisoner_hub_taxonomy_sorting_update_9001().
 */
function prisoner_hub_taxonomy_sorting_entity_base_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() === 'node') {
    $fields['series_sort_value'] = BaseFieldDefinition::create('integer')
      ->setLabel(t('Series sort value'))
      ->setDescription(t('A calculated sorting value for a content within a series.'))
      ->setReadOnly(TRUE);
  }
  elseif ($entity_type->id() == 'taxonomy_term') {
    // TODO: Remove this after prisoner_hub_taxonomy_sorting_update_9004() has run.
    $fields['content_updated'] = BaseFieldDefinition::create('integer')
      ->setLabel(t('Content updated'))
      ->setDescription(t('A timestamp of when the last piece of content within this taxonomy term was updated.'))
      ->setReadOnly(TRUE);
  }
  return $fields;
}

/**
 * Implements hook_entity_presave().
 *
 * Update values for sorting when content is created and updated.
 */
function prisoner_hub_taxonomy_sorting_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity instanceof NodeInterface) {
    \Drupal::service('prisoner_hub_taxonomy_sorting.entity_presave')->updatesSeriesSortValue($entity);
  }
}

/**
 * Implements hook_entity_update().
 *
 * Check to see whether the sort_by value has changed on a series.
 * If so, update all the content associated with that series.
 */
function prisoner_hub_taxonomy_sorting_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity instanceof ContentEntityInterface && $entity->hasField('field_sort_by')) {
    /** @var ContentEntityInterface $original_entity */
    if ($entity->original->get('field_sort_by')->getString() != $entity->get('field_sort_by')->getString()) {
      $results = \Drupal::entityQuery('node')->condition('field_moj_series', $entity->id())->execute();
      $nodes = Node::loadMultiple($results);
      /** @var \Drupal\node\NodeInterface $node */
      foreach ($nodes as $node) {
        // Resave the node to invoke hook_entity_presave().
        $node->save();
      }
    }
  }
}


/**
 * Implements hook_views_pre_build().
 *
 * Remove either the release date _or_ season+episode number fields from the
 * Series taxonomy term content sorting view.
 */
function prisoner_hub_taxonomy_sorting_views_pre_build(ViewExecutable $view) {
  if ($view->id() == 'series_taxonomy_term_content_sorting') {
    $term = \Drupal::routeMatch()->getParameter('taxonomy_term');
    if (!$term) {
      return;
    }
    $fields_to_remove = [];

    switch ($term->get('field_sort_by')->getString()) {
      case 'season_and_episode_asc':
      case 'season_and_episode_desc':
        $fields_to_remove[] ='form_field_field_release_date';
        break;

      case 'release_date_asc':
      case 'release_date_desc':
      $fields_to_remove[] = 'form_field_field_moj_season';
      $fields_to_remove[] = 'form_field_field_moj_episode';
    }

    // @See https://stackoverflow.com/a/9895991
    foreach ($fields_to_remove as $field_name) {
      unset($view->field[$field_name]);
      unset($view->display_handler->handlers['field'][$field_name]);
    }
  }
}
