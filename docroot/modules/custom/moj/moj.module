<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\moj_prisons\Entity\Prison;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Prevents Prison Officers from modifying user roles that are not related to
 * content visibility.
 */
function moj_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $current_user = \Drupal::currentUser();
  $current_path = \Drupal::service('path.current')->getPath();

  $form['#validate'][] = 'moj_form_user_form_validate';

  // If the user is a Prison Officer, disable non-content roles
  $user_roles = $current_user->getRoles();
  if (in_array('moj_prison_officer', $user_roles) &&
      !in_array('administrator', $user_roles)) {
    $roles = $form['account']['roles'];
    $role_ids = array_keys($roles['#options']);
    $non_content_roles = array_filter($role_ids, function ($id) {
      return 0 !== strpos($id, 'moj_view_');
    });

    $form['#attached']['library'][] = 'moj/user-form';

    foreach ($non_content_roles as $role) {
      $form['account']['roles'][$role]['#default_value'] = in_array($role, $roles['#default_value']);
      $form['account']['roles'][$role]['#disabled'] = true;
    }
  }
}

/**
 * Custom validation function for the user edit form.
 *
 * Ensures a Prison Officer is only modifying user roles concerned with
 * content visibility.
 */
function moj_form_user_form_validate($form, $form_state) {
  $current_user = \Drupal::currentUser();
  $current_user_roles = $current_user->getRoles();

  // If the user is a Prison Officer they can only change content-related roles
  $limit_user_roles = in_array('moj_prison_officer', $current_user_roles) &&
    !in_array('administrator', $current_user_roles);

  if ($limit_user_roles) {
    $selected_roles = $form_state->getValue('roles');
    $default_values = $form['account']['roles']['#default_value'];
    $altered_roles = array_diff($selected_roles, $default_values) +
                     array_diff($default_values, $selected_roles);

    $non_content_altered_roles = array_filter($altered_roles, function ($role) {
      return 0 !== strpos($role, 'moj_view_');
    });

    if (count($non_content_altered_roles)) {
      $form_state->setErrorByName('roles', t('You may only alter content-related roles.'));
      \Drupal::logger('moj')->notice('Prison Officer attempted to change non-content-related roles');
    }
  }
}

function moj_form_contact_message_web_application_feedback_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $current_user = \Drupal::currentUser()->getAccount();

  $prisonId = _moj_get_user_related_prison_ids($current_user);

  if (count($prisonId) > 0) {
    $prison = Prison::load($prisonId[0]);

    $form['field_prison']['widget'][0]['value']['#default_value'] = $prison->getName();
    $form['field_prison']['widget'][0]['value']['#type'] = 'hidden';
  }
}

function _moj_get_user_related_prison_ids(AccountInterface $account) {
  $user = User::load($account->id());
  $field_related_prisons = $user->field_related_prisons->getValue();
  $related_prison_ids = array_map(function($related) { return $related['target_id']; }, $field_related_prisons);
  return $related_prison_ids;
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function moj_user_insert($entity) {
  // Add the default content permission roles to new users.
  $entity->addRole('moj_view_pdf');
  $entity->addRole('moj_view_video');
  $entity->addRole('moj_view_radio');
  $entity->save();
}
