<?php

/**
 * @file
 * Contains prisoner_hub_prison_access_cms.module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\prisoner_hub_prison_access_cms\PrisonFieldPreRender;

/**
 * Implements hook_field_widget_form_alter().
 *
 * Set disabled states and make other further modifications to the entity
 * edit form.  Based on the users prisons and level of access.
 */
function prisoner_hub_prison_access_cms_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $context['items']->getEntity();

  /** @var \Drupal\prisoner_hub_prison_access_cms\EntityEditAccess $entity_edit_access */
  $entity_edit_access = \Drupal::service('prisoner_hub_prison_access_cms.entity_edit_access');

  $field_name = $context['items']->getFieldDefinition()->getName();

  if (!$entity_edit_access->hasFieldAccess($field_name, $entity)) {
    $element['#disabled'] = TRUE;

    // Only add a warning message if the form has no input (i.e. not been
    // submitted).
    // As this form_alter function is also invoked on submit, so we could end up
    // setting this message on a different page, if the form redirects to
    // another url after submit.
    if (empty($form_state->getUserInput())) {
      // Set a different message when using views_entity_form_field.
      if (substr($form_state->getFormObject()->getFormId(), 0, strlen('views_form')) == 'views_form') {
        \Drupal::messenger()->addWarning(t('You cannot update values for some of the content on this page, as they are owned by another prison.'));
      }
      else {
        \Drupal::messenger()->addWarning(t('You cannot make changes to this content, as it is owned by another prison.  However, you <strong>can</strong> set your own prison to be <a href="#edit-group-exclude-from-prison">excluded from the content.</a>'));
      }

    }
  }

  // Modify the field_exclude_from_prison, to set "disabled" state on all
  // prisons the user does not have access to.
  // This must be done in a pre_render, after the term_reference_tree module
  // has built the list of taxonomy terms.
  $prison_field_names = [
    \Drupal::getContainer()->getParameter('prisoner_hub_prison_access.exclude_from_prison_field_name'),
    \Drupal::getContainer()->getParameter('prisoner_hub_prison_access.prison_field_name'),
  ];
  if (in_array($field_name, $prison_field_names) && isset($element['#type']) && $element['#type'] == 'checkbox_tree') {
    if (!$entity->isNew() && !$entity_edit_access->hasEntityAccess($entity)) {
      $element['#pre_render'][] = [
        PrisonFieldPreRender::class, 'preRenderPrisonField',
      ];
    }
  }

  // Set the default value for the prison owner field to the users prisons.
  // On new content only (do not modify existing content).
  $prison_owner_field_name = \Drupal::getContainer()->getParameter('prisoner_hub_prison_access_cms.prison_owner_field_name');
  if ($field_name == $prison_owner_field_name) {
    if ($entity->isNew()) {
      foreach ($entity_edit_access->getUserPrisons() as $user_prison) {
        $element['#default_value'][] = $user_prison->id();
      }
    }
  }

  // Set disabled state to the field_user_prisons if the user does not have
  // the permission to edit them.
  $user_prison_field_name = \Drupal::getContainer()->getParameter('prisoner_hub_prison_access_cms.user_prison_field_name');
  if ($field_name == $user_prison_field_name && !\Drupal::currentUser()->hasPermission('assign prisons to users')) {
    $element['#disabled'] = TRUE;
    $element['#description'] .= '<p>' . t('You are unable to make changes to your prison.') . '</p>';
  }

}

/**
 * Implements hook_entity_presave().
 *
 * If we have set prison checkboxes to a "disabled" state, then these are not
 * sent through in the POST request (even if checked).
 * And so any previously saved prisons will be inadvertently removed.
 * This function checks to see if there are any that should be added back in.
 */
function prisoner_hub_prison_access_cms_entity_presave(EntityInterface $entity) {
  $entity_edit_access = \Drupal::service('prisoner_hub_prison_access_cms.entity_edit_access');
  $prison_field_names = [
    \Drupal::getContainer()->getParameter('prisoner_hub_prison_access.exclude_from_prison_field_name'),
    \Drupal::getContainer()->getParameter('prisoner_hub_prison_access.prison_field_name'),
  ];

  // Only act on
  // 1. entities with modifications (i.e. with an $entity->original).
  // 2. content entities (we don't want to deal with config entities)
  // 3. entities the user does not have access to (otherwise disabled states
  // won't have been applied).
  if (isset($entity->original) &&
    $entity instanceof ContentEntityInterface &&
    !$entity_edit_access->hasEntityAccess($entity)
  ) {
    foreach ($prison_field_names as $prison_field_name) {
      if ($entity->hasField($prison_field_name)) {
        $original_field_value = $entity->original->get($prison_field_name)->getValue();
        $submitted_field_value = $entity->get($prison_field_name)->getValue();

        // Loop through the original field value (before modification), if
        // there were any previously enabled prisons that the user does not
        // have access to, add these back in (as they would have been set to
        // disabled so not intentionally removed by the user).
        foreach ($original_field_value as $value) {
          if (!$entity_edit_access->hasPrisonTermAccess($value['target_id'])) {
            $submitted_field_value[] = ['target_id' => $value['target_id']];
          }
        }
        $entity->set($prison_field_name, $submitted_field_value);
      }
    }
  }
}

/**
 * Implements hook_field_group_form_process_alter().
 *
 * Make the exclude_from_prison field_group details element open (expanded), if
 * this is the only field the user can access.
 *
 * This is a UX improvement.  By default the exclude_from_prison field group is
 * closed (using the field_group_open_non_empty formatter).  If this is the only
 * field a user can access, we want to always show as open.
 */
function prisoner_hub_prison_access_cms_field_group_form_process_alter(array &$element, &$group, &$complete_form) {
  $exclude_from_prison_field_name = \Drupal::getContainer()->getParameter('prisoner_hub_prison_access.exclude_from_prison_field_name');
  if (in_array($exclude_from_prison_field_name, $group->children)) {
    // Open the exclude_from_prison field_group if the status field has been
    // set to disabled. (Unfortunately, as we do not have access here to the
    // entity itself, we have to assume the user does not have access if the
    // status field is disabled).
    if (isset($complete_form['status']['widget']['#disabled']) && $complete_form['status']['widget']['#disabled']) {
      $element['#open'] = TRUE;
    }
  }
}
