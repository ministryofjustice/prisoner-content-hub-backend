<?php

/**
 * @file
 * Contains prisoner_hub_taxonomy_access.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Render\RenderContext;
use Drupal\node\NodeInterface;

/**
 * Implements hook_ENTITY_TYPE_access().
 *
 * Prevents access to series and categories if there is no available content
 * within.
 */
function prisoner_hub_taxonomy_access_taxonomy_term_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
  // Don't act on other taxonomy types.
  if (!in_array($entity->bundle(), ['moj_categories', 'series'])) {
    return AccessResult::neutral();
  }

  // If user can edit the taxonomy, then return neutral.
  if ($account->hasPermission("edit terms in {$entity->bundle()}")) {
    return AccessResult::neutral();
  }

  // Run an entity query to check if there is any content in the taxonomy term.
  // Note that entity queries will automatically pick up rules from
  // prisoner_hub_prison_access automatically. (So when a series or category is
  // requested with a prison context, only content for that prison will be
  // returned).
  $query = \Drupal::entityQuery('node');

  // For categories we need to check for both content assigned to that category
  // AND content assigned to a series in that category.
  if ($entity->bundle() == 'moj_categories') {
    $condition_group = $query->orConditionGroup()
      ->condition('field_moj_top_level_categories', $entity->id())
      ->condition('field_moj_series.entity:taxonomy_term.field_category', $entity->id());
    $query->condition($condition_group);
  }
  // For series we just need to check content assigned directly to the series.
  elseif ($entity->bundle() == 'series') {
    $query->condition('field_moj_series', $entity->id());
  }

  // We have to add in our own condition for status, as amazingly this isn't
  // implemented by default.
  // See https://drupal.stackexchange.com/a/257370/4831
  $query->condition('status', NodeInterface::PUBLISHED);

  // Query must be executed in render context to avoid 500 errors when
  // being run through JSON:API.  For more info
  // @See \Drupal\jsonapi\Controller\EntityResource::executeQueryInRenderContext()
  $context = new RenderContext();
  $results = \Drupal::service('renderer')->executeInRenderContext($context, function () use ($query) {
    return $query->execute();
  });
  return AccessResult::forbiddenIf(count($results) == 0);
}
