<?php

/**
 * @file
 * Contains prisoner_hub_taxonomy_field_ux.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\prisoner_hub_taxonomy_field_ux\Plugin\Validation\Constraint\CategoryOrSeries;

/**
 * Implements hook_field_group_form_process_build_alter().
 *
 * Apply form conditional states via the
 * Drupal\prisoner_hub_taxonomy_field_ux\EntityFormStates service.
 */
function prisoner_hub_taxonomy_field_ux_field_group_form_process_build_alter(array &$element, FormStateInterface $form_state, &$complete_form) {
  if (isset($element['group_season_and_episode_number']) && isset($element['group_release_date'])) {
    \Drupal::service('prisoner_hub_taxonomy_field_ux.entity_form_states')->applyToForm($element);
  }
}

/**
 * Implements hook_entity_presave().
 *
 * @throws Exception
 *   Exception thrown when entity cannot be validated.
 */
function prisoner_hub_taxonomy_field_ux_entity_presave(EntityInterface $entity) {
  if ($entity instanceof NodeInterface) {
    prisoner_hub_taxonomy_field_ux_entity_presave_validate($entity);
    prisoner_hub_taxonomy_field_ux_entity_presave_clear_series_data($entity);
  }
}

/**
 * Clear out series fields when no series is selected.
 */
function prisoner_hub_taxonomy_field_ux_entity_presave_clear_series_data(NodeInterface $node) {
  if ($node->hasField('field_moj_series')
    && $node->hasField('field_moj_top_level_categories')) {
    if (empty($node->get('field_moj_series')->getValue())) {
      $node->set('field_moj_episode', NULL);
      $node->set('field_moj_season', NULL);
      $node->set('field_release_date', NULL);
    }
  }
}

/**
 * Ensure all relevant node types are validated.
 *
 * @param \Drupal\node\NodeInterface $node
 *   Entity being saved.
 *
 * @throws Exception
 *   Exception thrown when validation fails.
 */
function prisoner_hub_taxonomy_field_ux_entity_presave_validate(NodeInterface $node) {
  // We only care about the following types of nodes.
  $bundles = prisoner_hub_taxonomy_field_ux_category_series_bundles();
  if (!in_array($node->bundle(), $bundles)) {
    return;
  }
  $violation_list = $node->validate();
  foreach ($violation_list as $violation) {
    // We only care about our constraints, not those generated by e.g. core.
    if ($violation->getConstraint() instanceof CategoryOrSeries) {
      throw new Exception($violation->getMessage());
    }
  }

}

/**
 * Implements hook_views_data_alter().
 */
function prisoner_hub_taxonomy_field_ux_views_data_alter(array &$data) {
  if (isset($data['taxonomy_term_data'])) {
    // Add the parent category computed field to Views.
    $data['taxonomy_term_data']['dynamic_parent_category'] = [
      'title' => t('Dynamic parent category'),
      'field' => [
        'id' => 'dynamic_parent_category',
      ],
    ];
  }
}

/**
 * Defines the bundles which must have a category or field set.
 *
 * @return string[]
 *   List of the bundle machine names which must have a category or field set.
 */
function prisoner_hub_taxonomy_field_ux_category_series_bundles(): array {
  return [
    'link',
    'page',
    'moj_pdf_item',
    'moj_radio_item',
    'moj_video_item',
  ];
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 *
 * Adds a constraint to ensure relevant content types have to have a category
 * or a series set.
 */
function prisoner_hub_taxonomy_field_ux_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  // We only care about nodes.
  if ($entity_type->id() != 'node') {
    return;
  }
  // We only care about the following types of nodes.
  $bundles = prisoner_hub_taxonomy_field_ux_category_series_bundles();
  if (!in_array($bundle, $bundles)) {
    return;
  }
  // Add the constraint to the relevant fields.
  if (isset($fields['field_moj_series'])) {
    $fields['field_moj_series']?->addConstraint('CategoryOrSeries');
  }
  if (isset($fields['field_moj_top_level_categories'])) {
    $fields['field_moj_top_level_categories']?->addConstraint('CategoryOrSeries');
  }

}
