diff --git a/src/Form/EntityCloneForm.php b/src/Form/EntityCloneForm.php
index 55ebec9..f9625ca 100644
--- a/src/Form/EntityCloneForm.php
+++ b/src/Form/EntityCloneForm.php
@@ -2,8 +2,11 @@

 namespace Drupal\entity_clone\Form;

+use Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityPublishedInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\Messenger;
@@ -64,6 +67,20 @@ class EntityCloneForm extends FormBase {
    */
   protected $messenger;

+  /**
+   * The module handler service.
+   *
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   */
+  protected $moduleHanlder;
+
+  /**
+   * The entity definition update manager.
+   *
+   * @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface
+   */
+  protected $entityDefinitionUpdateManager;
+
   /**
    * The current user.
    *
@@ -104,10 +121,14 @@ class EntityCloneForm extends FormBase {
    *   The entity clone settings manager.
    * @param \Drupal\entity_clone\Services\EntityCloneServiceProvider $service_provider
    *   The Service Provider that verifies if entity has ownership.
+   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   *   The module handler service.
+   * @param \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $entity_definition_update_manager
+   *   The entity definition update manager.
    *
    * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
    */
-  public function __construct(EntityTypeManagerInterface $entity_type_manager, RouteMatchInterface $route_match, TranslationManager $string_translation, EventDispatcherInterface $eventDispatcher, Messenger $messenger, AccountProxyInterface $currentUser, EntityCloneSettingsManager $entity_clone_settings_manager, EntityCloneServiceProvider $service_provider) {
+  public function __construct(EntityTypeManagerInterface $entity_type_manager, RouteMatchInterface $route_match, TranslationManager $string_translation, EventDispatcherInterface $eventDispatcher, Messenger $messenger, AccountProxyInterface $currentUser, EntityCloneSettingsManager $entity_clone_settings_manager, EntityCloneServiceProvider $service_provider, ModuleHandlerInterface $module_handler, EntityDefinitionUpdateManagerInterface $entity_definition_update_manager) {
     $this->entityTypeManager = $entity_type_manager;
     $this->stringTranslationManager = $string_translation;
     $this->eventDispatcher = $eventDispatcher;
@@ -120,6 +141,8 @@ class EntityCloneForm extends FormBase {
     $this->currentUser = $currentUser;
     $this->entityCloneSettingsManager = $entity_clone_settings_manager;
     $this->serviceProvider = $service_provider;
+    $this->moduleHanlder = $module_handler;
+    $this->entityDefinitionUpdateManager = $entity_definition_update_manager;
   }

   /**
@@ -134,7 +157,9 @@ class EntityCloneForm extends FormBase {
       $container->get('messenger'),
       $container->get('current_user'),
       $container->get('entity_clone.settings.manager'),
-      $container->get('entity_clone.service_provider')
+      $container->get('entity_clone.service_provider'),
+      $container->get('module_handler'),
+      $container->get('entity.definition_update_manager')
     );
   }

@@ -166,6 +191,16 @@ class EntityCloneForm extends FormBase {
         ];
       }

+      $has_content_translation_status_field = $this->moduleHanlder->moduleExists('content_translation') && $this->entityDefinitionUpdateManager->getFieldStorageDefinition('content_translation_status', $this->entityTypeDefinition->id());
+      if ($this->entity instanceof EntityPublishedInterface || $has_content_translation_status_field) {
+        $form['status'] =[
+          '#type' => 'checkbox',
+          '#title' => $this->stringTranslationManager->translate('Save cloned @entity_type as published', ['@entity_type' => $this->entityTypeDefinition->getLabel()]),
+          '#description' => $this->stringTranslationManager->translate('If the cloned entity should be save as a published entity.'),
+          '#default_value' => FALSE,
+        ];
+      }
+
       $form['actions'] = ['#type' => 'actions'];
       $form['actions']['clone'] = [
         '#type' => 'submit',
@@ -205,6 +240,20 @@ class EntityCloneForm extends FormBase {

     $duplicate = $this->entity->createDuplicate();

+    $has_content_translation_status_field = $this->moduleHanlder->moduleExists('content_translation') && $this->entityDefinitionUpdateManager->getFieldStorageDefinition('content_translation_status', $this->entityTypeDefinition->id());
+    if ($duplicate instanceof EntityPublishedInterface || $has_content_translation_status_field) {
+      if ($duplicate instanceof EntityPublishedInterface) {
+        $status_field = 'status';
+      }
+      else {
+        $status_field = 'content_translation_status';
+      }
+      foreach ($duplicate->getTranslationLanguages() as $translation_language) {
+        $translation = $duplicate->getTranslation($translation_language->getId());
+        $translation->set($status_field, $form_state->getValue('status'));
+      }
+    }
+
     $this->eventDispatcher->dispatch(EntityCloneEvents::PRE_CLONE, new EntityCloneEvent($this->entity, $duplicate, $properties));
     $cloned_entity = $entity_clone_handler->cloneEntity($this->entity, $duplicate, $properties);
     $this->eventDispatcher->dispatch(EntityCloneEvents::POST_CLONE, new EntityCloneEvent($this->entity, $duplicate, $properties));
