diff --git a/core/modules/taxonomy/src/VocabularyAccessControlHandler.php b/core/modules/taxonomy/src/VocabularyAccessControlHandler.php
index 176691408a..19598097ef 100644
--- a/core/modules/taxonomy/src/VocabularyAccessControlHandler.php
+++ b/core/modules/taxonomy/src/VocabularyAccessControlHandler.php
@@ -20,9 +20,11 @@ class VocabularyAccessControlHandler extends EntityAccessControlHandler {
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
     switch ($operation) {
       case 'access taxonomy overview':
-      case 'view':
         return AccessResult::allowedIfHasPermissions($account, ['access taxonomy overview', 'administer taxonomy'], 'OR');
 
+      case 'view':
+        return AccessResult::allowedIfHasPermissions($account, ['access taxonomy overview', 'administer taxonomy', 'access content'], 'OR');
+
       default:
         return parent::checkAccess($entity, $operation, $account);
     }
diff --git a/core/modules/taxonomy/tests/src/Kernel/Views/TaxonomyFieldVidTest.php b/core/modules/taxonomy/tests/src/Kernel/Views/TaxonomyFieldVidTest.php
index 1b0c88b28a..d410092fc7 100644
--- a/core/modules/taxonomy/tests/src/Kernel/Views/TaxonomyFieldVidTest.php
+++ b/core/modules/taxonomy/tests/src/Kernel/Views/TaxonomyFieldVidTest.php
@@ -4,8 +4,8 @@
 
 use Drupal\Core\Render\RenderContext;
 use Drupal\Tests\taxonomy\Traits\TaxonomyTestTrait;
+use Drupal\Tests\user\Traits\UserCreationTrait;
 use Drupal\Tests\views\Kernel\ViewsKernelTestBase;
-use Drupal\user\Entity\User;
 use Drupal\views\Tests\ViewTestData;
 use Drupal\views\Views;
 use Drupal\taxonomy\Entity\Vocabulary;
@@ -18,6 +18,7 @@
 class TaxonomyFieldVidTest extends ViewsKernelTestBase {
 
   use TaxonomyTestTrait;
+  use UserCreationTrait;
 
   /**
    * Modules to enable.
@@ -66,12 +67,6 @@ protected function setUp($import_test_views = TRUE): void {
     $vocabulary = $this->createVocabulary();
     $this->term1 = $this->createTerm($vocabulary);
 
-    // Create user 1 and set is as the logged in user, so that the logged in
-    // user has the correct permissions to view the vocabulary name.
-    $this->adminUser = User::create(['name' => $this->randomString()]);
-    $this->adminUser->save();
-    $this->container->get('current_user')->setAccount($this->adminUser);
-
     ViewTestData::createTestViews(static::class, ['taxonomy_test_views']);
   }
 
@@ -85,6 +80,9 @@ public function testViewsHandlerVidField() {
     $view = Views::getView('test_taxonomy_vid_field');
     $this->executeView($view);
 
+    // Test with user who is an admin.
+    $this->setUpCurrentUser([], [], TRUE);
+
     $actual = $renderer->executeInRenderContext(new RenderContext(), function () use ($view) {
       return $view->field['vid']->advancedRender($view->result[0]);
     });
@@ -92,6 +90,26 @@ public function testViewsHandlerVidField() {
     $expected = $vocabulary->get('name');
 
     $this->assertEquals($expected, $actual);
+
+    // Test with user without 'access content' permission.
+    $this->setUpCurrentUser([], []);
+
+    $actual = $renderer->executeInRenderContext(new RenderContext(), function () use ($view) {
+      return $view->field['vid']->advancedRender($view->result[0]);
+    });
+    $expected = '';
+
+    $this->assertEquals($expected, $actual);
+
+    // Test with user with 'access content' permission.
+    $this->setUpCurrentUser([], ['access content']);
+
+    $actual = $renderer->executeInRenderContext(new RenderContext(), function () use ($view) {
+      return $view->field['vid']->advancedRender($view->result[0]);
+    });
+    $expected = $vocabulary->get('name');
+
+    $this->assertEquals($expected, $actual);
   }
 
 }
