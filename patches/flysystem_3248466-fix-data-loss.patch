diff --git a/flysystem_s3.services.yml b/flysystem_s3.services.yml
index beb7a9d..8744431 100644
--- a/flysystem_s3.services.yml
+++ b/flysystem_s3.services.yml
@@ -3,4 +3,4 @@ services:
     public: false
     class: \Drupal\flysystem_s3\File\FlysystemS3FileSystem
     decorates: file_system
-    arguments: ['@stream_wrapper_manager', '@settings', '@logger.channel.file', '@flysystem_s3.file_system.inner']
+    arguments: ['@stream_wrapper_manager', '@settings', '@logger.channel.file', '@entity_type.manager', '@flysystem_s3.file_system.inner']
diff --git a/src/Controller/S3CorsUploadAjaxController.php b/src/Controller/S3CorsUploadAjaxController.php
index eaf9e13..d20f405 100644
--- a/src/Controller/S3CorsUploadAjaxController.php
+++ b/src/Controller/S3CorsUploadAjaxController.php
@@ -72,19 +72,16 @@ class S3CorsUploadAjaxController extends ControllerBase {

     $client = $adapter->getClient();
     $bucket = $adapter->getBucket();
-    $destination = $adapter->applyPathPrefix(StreamWrapperManager::getTarget($post['destination']));
+    $destination = $this->fileSystem->getDestinationFilename($post['destination'] . '/' . $post['filename'], FileSystemInterface::EXISTS_RENAME);

-    // Retrieve the file name and build the URI.
-    // Destination does not contain a prefix as it is applied by the fly system.
-    $uri = \Drupal::service('file_system')->createFilename($post['filename'], $post['destination']);
     // Apply the prefix to the URI and use it as a key in the POST request.
-    $post['key'] = $adapter->applyPathPrefix(StreamWrapperManager::getTarget($uri));
+    $post['key'] = $adapter->applyPathPrefix(StreamWrapperManager::getTarget($destination));

     // Create a temporary file to return with a file ID in the response.
     $file = File::create([
-      'uri' => $uri,
+      'uri' => $destination,
       'filesize' => $post['filesize'],
-      'filename' => $post['filename'],
+      'filename' => $this->fileSystem->baseName($destination),
       'filemime' => $post['filemime'],
       'uid' => \Drupal::currentUser()->getAccount()->id(),
     ]);
@@ -96,7 +93,7 @@ class S3CorsUploadAjaxController extends ControllerBase {
     $options = [
       ['acl' => $post['acl']],
       ['bucket' => $bucket],
-      ['starts-with', '$key', $destination . '/'],
+      ['starts-with', '$key', $post['key']],
       ['starts-with', '$Content-Type', $post['Content-Type']],
     ];

diff --git a/src/File/FlysystemS3FileSystem.php b/src/File/FlysystemS3FileSystem.php
index 4107eb3..feb0ee5 100644
--- a/src/File/FlysystemS3FileSystem.php
+++ b/src/File/FlysystemS3FileSystem.php
@@ -2,12 +2,15 @@

 namespace Drupal\flysystem_s3\File;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\File\Exception\FileException;
 use Drupal\Core\File\Exception\FileWriteException;
 use Drupal\Core\File\FileSystem;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Site\Settings;
 use Drupal\Core\StreamWrapper\StreamWrapperManager;
 use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
+use Drupal\file\Entity\File;
 use Psr\Log\LoggerInterface;

 /**
@@ -37,6 +40,13 @@ class FlysystemS3FileSystem extends FileSystem {
    */
   protected $streamWrapperManager;

+  /**
+   * The entity type manager.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   */
+  protected $entityTypeManager;
+
   /**
    * The file system being decorated.
    *
@@ -56,10 +66,11 @@ class FlysystemS3FileSystem extends FileSystem {
    * @param \Drupal\Core\File\FileSystemInterface $file_system
    *   The file system being decorated.
    */
-  public function __construct(StreamWrapperManagerInterface $stream_wrapper_manager, Settings $settings, LoggerInterface $logger, FileSystemInterface $file_system) {
+  public function __construct(StreamWrapperManagerInterface $stream_wrapper_manager, Settings $settings, LoggerInterface $logger, EntityTypeManagerInterface $entity_type_manager, FileSystemInterface $file_system) {
     $this->streamWrapperManager = $stream_wrapper_manager;
     $this->settings = $settings;
     $this->logger = $logger;
+    $this->entityTypeManager = $entity_type_manager;
     $this->fileSystem = $file_system;
   }

@@ -357,20 +368,6 @@ class FlysystemS3FileSystem extends FileSystem {
     }
   }

-  /**
-   * {@inheritdoc}
-   *
-   * @codeCoverageIgnore
-   */
-  public function createFilename($basename, $directory) {
-    if (method_exists($this->fileSystem, 'createFilename')) {
-      return $this->fileSystem->createFilename($basename, $directory);
-    }
-    else {
-      return file_create_filename($basename, $directory);
-    }
-  }
-
   /**
    * Return if a scheme is a S3 scheme.
    *
@@ -402,4 +399,69 @@ class FlysystemS3FileSystem extends FileSystem {
       && $settings[$scheme]['config']['options']['ACL'] == 'private';
   }

+  /**
+   * {@inheritdoc}
+   *
+   * Override createFilename() as we also need to check files exist as entities.
+   * This can happen if a CORS upload fails.
+   *
+   * @codeCoverageIgnore
+   */
+  public function createFilename($basename, $directory) {
+    $original = $basename;
+    // Strip control characters (ASCII value < 32). Though these are allowed in
+    // some filesystems, not many applications handle them well.
+    $basename = preg_replace('/[\x00-\x1F]/u', '_', $basename);
+    if (preg_last_error() !== PREG_NO_ERROR) {
+      throw new FileException(sprintf("Invalid filename '%s'", $original));
+    }
+    if (substr(PHP_OS, 0, 3) == 'WIN') {
+      // These characters are not allowed in Windows filenames.
+      $basename = str_replace([':', '*', '?', '"', '<', '>', '|'], '_', $basename);
+    }
+
+    // A URI or path may already have a trailing slash or look like "public://".
+    if (substr($directory, -1) == '/') {
+      $separator = '';
+    }
+    else {
+      $separator = '/';
+    }
+
+    $destination = $directory . $separator . $basename;
+
+    // Destination file already exists, generate an alternative.
+    $pos = strrpos($basename, '.');
+    if ($pos !== FALSE) {
+      $name = substr($basename, 0, $pos);
+      $ext = substr($basename, $pos);
+    }
+    else {
+      $name = $basename;
+      $ext = '';
+    }
+
+    $result = $this->entityTypeManager->getStorage('file')->getQuery()
+      ->accessCheck(FALSE)
+      ->condition('filename', $name, 'STARTS_WITH')
+      ->condition('uri', $directory, 'STARTS_WITH')
+      ->execute();
+
+    if (file_exists($destination) || !empty($result)) {
+      $files = File::loadMultiple($result);
+      $existing_filenames = [];
+      foreach ($files as $file) {
+        $existing_filenames[] = $file->getFilename();
+      }
+
+      $counter = 0;
+      do {
+        $filename = $name . '_' . $counter++ . $ext;
+        $destination = $directory . $separator . $filename;
+      } while (file_exists($destination) || in_array($filename, $existing_filenames));
+    }
+
+    return $destination;
+  }
+
 }
