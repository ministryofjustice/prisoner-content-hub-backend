diff --git a/core/modules/jsonapi/tests/src/Functional/VocabularyTest.php b/core/modules/jsonapi/tests/src/Functional/VocabularyTest.php
index cf86bb3e77..b6209d770d 100644
--- a/core/modules/jsonapi/tests/src/Functional/VocabularyTest.php
+++ b/core/modules/jsonapi/tests/src/Functional/VocabularyTest.php
@@ -108,7 +108,7 @@ protected function getPostDocument() {
    */
   protected function getExpectedUnauthorizedAccessMessage($method) {
     if ($method === 'GET') {
-      return "The following permissions are required: 'access taxonomy overview' OR 'administer taxonomy'.";
+      return "The following permissions are required: 'access taxonomy overview' OR 'administer taxonomy' OR 'access content'.";
     }
     return parent::getExpectedUnauthorizedAccessMessage($method);
   }
diff --git a/core/modules/taxonomy/src/VocabularyAccessControlHandler.php b/core/modules/taxonomy/src/VocabularyAccessControlHandler.php
index 93fab47e5d..8df66be1b5 100644
--- a/core/modules/taxonomy/src/VocabularyAccessControlHandler.php
+++ b/core/modules/taxonomy/src/VocabularyAccessControlHandler.php
@@ -20,9 +20,11 @@ class VocabularyAccessControlHandler extends EntityAccessControlHandler {
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
     switch ($operation) {
       case 'access taxonomy overview':
-      case 'view':
         return AccessResult::allowedIfHasPermissions($account, ['access taxonomy overview', 'administer taxonomy'], 'OR');
 
+      case 'view':
+        return AccessResult::allowedIfHasPermissions($account, ['access taxonomy overview', 'administer taxonomy', 'access content'], 'OR');
+
       case 'reset all weights':
         return AccessResult::allowedIfHasPermissions($account, [
           'administer taxonomy',
diff --git a/core/modules/taxonomy/tests/src/Functional/Rest/VocabularyResourceTestBase.php b/core/modules/taxonomy/tests/src/Functional/Rest/VocabularyResourceTestBase.php
index de8e7a5804..6703846a00 100644
--- a/core/modules/taxonomy/tests/src/Functional/Rest/VocabularyResourceTestBase.php
+++ b/core/modules/taxonomy/tests/src/Functional/Rest/VocabularyResourceTestBase.php
@@ -71,7 +71,7 @@ protected function getNormalizedPostEntity() {
    */
   protected function getExpectedUnauthorizedAccessMessage($method) {
     if ($method === 'GET') {
-      return "The following permissions are required: 'access taxonomy overview' OR 'administer taxonomy'.";
+      return "The following permissions are required: 'access taxonomy overview' OR 'administer taxonomy' OR 'access content'.";
     }
     return parent::getExpectedUnauthorizedAccessMessage($method);
   }
diff --git a/core/modules/taxonomy/tests/src/Kernel/Views/TaxonomyFieldVidTest.php b/core/modules/taxonomy/tests/src/Kernel/Views/TaxonomyFieldVidTest.php
index fbc253bde2..559de7600b 100644
--- a/core/modules/taxonomy/tests/src/Kernel/Views/TaxonomyFieldVidTest.php
+++ b/core/modules/taxonomy/tests/src/Kernel/Views/TaxonomyFieldVidTest.php
@@ -4,8 +4,8 @@
 
 use Drupal\Core\Render\RenderContext;
 use Drupal\Tests\taxonomy\Traits\TaxonomyTestTrait;
+use Drupal\Tests\user\Traits\UserCreationTrait;
 use Drupal\Tests\views\Kernel\ViewsKernelTestBase;
-use Drupal\user\Entity\User;
 use Drupal\views\Tests\ViewTestData;
 use Drupal\views\Views;
 use Drupal\taxonomy\Entity\Vocabulary;
@@ -18,6 +18,7 @@
 class TaxonomyFieldVidTest extends ViewsKernelTestBase {
 
   use TaxonomyTestTrait;
+  use UserCreationTrait;
 
   /**
    * Modules to enable.
@@ -72,12 +73,6 @@ protected function setUp($import_test_views = TRUE): void {
     $term = $this->createTerm($vocabulary2);
     $this->terms[$term->id()] = $term;
 
-    // Create user 1 and set is as the logged in user, so that the logged in
-    // user has the correct permissions to view the vocabulary name.
-    $this->adminUser = User::create(['name' => $this->randomString()]);
-    $this->adminUser->save();
-    $this->container->get('current_user')->setAccount($this->adminUser);
-
     ViewTestData::createTestViews(static::class, ['taxonomy_test_views']);
   }
 
@@ -91,6 +86,9 @@ public function testViewsHandlerVidField() {
     $view = Views::getView('test_taxonomy_vid_field');
     $this->executeView($view);
 
+    // Test with user who is an admin.
+    $this->setUpCurrentUser([], [], TRUE);
+
     $actual = $renderer->executeInRenderContext(new RenderContext(), function () use ($view) {
       return $view->field['vid']->advancedRender($view->result[0]);
     });
@@ -116,6 +114,26 @@ public function testViewsHandlerVidField() {
 
     $this->assertEquals($expected, $actual, 'Displayed vocabulary name should match that loaded from the term.');
     $this->assertEquals('bbb', $vocabulary->id(), 'First result should be vocabulary "bbb", due to DESC sorting.');
+
+    // Test with user without 'access content' permission.
+    $this->setUpCurrentUser([], []);
+
+    $actual = $renderer->executeInRenderContext(new RenderContext(), function () use ($view) {
+      return $view->field['vid']->advancedRender($view->result[0]);
+    });
+    $expected = '';
+
+    $this->assertEquals($expected, $actual);
+
+    // Test with user with 'access content' permission.
+    $this->setUpCurrentUser([], ['access content']);
+
+    $actual = $renderer->executeInRenderContext(new RenderContext(), function () use ($view) {
+      return $view->field['vid']->advancedRender($view->result[0]);
+    });
+    $expected = $vocabulary->get('name');
+
+    $this->assertEquals($expected, $actual);
   }
 
 }
