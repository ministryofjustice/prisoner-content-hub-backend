diff --git a/src/Plugin/search_api/datasource/ContentEntity.php b/src/Plugin/search_api/datasource/ContentEntity.php
index d92f1fa4..6bb10fa8 100644
--- a/src/Plugin/search_api/datasource/ContentEntity.php
+++ b/src/Plugin/search_api/datasource/ContentEntity.php
@@ -1106,6 +1106,7 @@ public function getAffectedItemsForEntityChange(EntityInterface $entity, array $
     }
 
     $ids_to_reindex = [];
+    $enabled_languages = array_keys($this->getLanguages());
     $path_separator = IndexInterface::PROPERTY_PATH_SEPARATOR;
     foreach ($foreign_entity_relationship_map as $relation_info) {
       // Ignore relationships belonging to other datasources.
@@ -1146,6 +1147,17 @@ public function getAffectedItemsForEntityChange(EntityInterface $entity, array $
 
         try {
           $entity_ids = array_values($query->execute());
+
+          // Unfortunately, we need to load all the entities in order to know
+          // which translations they have.
+          /** @var \Drupal\Core\Entity\ContentEntityInterface $referenced_entity */
+          foreach ($this->getEntityStorage()->loadMultiple($entity_ids) as $entity_id => $referenced_entity) {
+            $translations = array_keys($referenced_entity->getTranslationLanguages());
+            $translations = array_intersect($translations, $enabled_languages);
+            foreach ($translations as $langcode) {
+              $ids_to_reindex["$entity_id:$langcode"] = 1;
+            }
+          }
         }
         // @todo Switch back to \Exception once Core bug #2893747 is fixed.
         catch (\Throwable $e) {
@@ -1172,11 +1184,6 @@ public function getAffectedItemsForEntityChange(EntityInterface $entity, array $
           $this->logException($e, '%type while attempting to find indexed entities referencing changed %entity_type with ID "@entity_id" for index %index: @message in %function (line %line of %file).', $vars, RfcLogLevel::ERROR, $link);
           continue;
         }
-        foreach ($entity_ids as $entity_id) {
-          foreach ($this->getLanguages() as $language) {
-            $ids_to_reindex["$entity_id:{$language->getId()}"] = 1;
-          }
-        }
       }
     }
 
diff --git a/tests/src/Kernel/Datasource/ReferencedEntitiesReindexingTest.php b/tests/src/Kernel/Datasource/ReferencedEntitiesReindexingTest.php
index 4a060c3e..9b6820f5 100644
--- a/tests/src/Kernel/Datasource/ReferencedEntitiesReindexingTest.php
+++ b/tests/src/Kernel/Datasource/ReferencedEntitiesReindexingTest.php
@@ -4,6 +4,7 @@
 
 namespace Drupal\Tests\search_api\Kernel\Datasource;
 
+use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
@@ -11,6 +12,8 @@
 use Drupal\search_api\Entity\Server;
 use Drupal\search_api\Utility\TrackingHelper;
 use Drupal\search_api\Utility\Utility;
+use Drupal\Tests\search_api\Kernel\PostRequestIndexingTrait;
+use Drupal\Tests\search_api\Kernel\TestLogger;
 
 /**
  * Tests that changes in related entities are correctly tracked.
@@ -19,6 +22,8 @@
  */
 class ReferencedEntitiesReindexingTest extends KernelTestBase {
 
+  use PostRequestIndexingTrait;
+
   /**
    * {@inheritdoc}
    */
@@ -100,6 +105,19 @@ public function setUp(): void {
     $this->index->save();
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function register(ContainerBuilder $container): void {
+    parent::register($container);
+
+    // Set a logger that will throw exceptions when warnings/errors are logged.
+    $logger = new TestLogger('');
+    $container->set('logger.factory', $logger);
+    $container->set('logger.channel.search_api', $logger);
+    $container->set('logger.channel.search_api_db', $logger);
+  }
+
   /**
    * Tests correct tracking of changes in referenced entities.
    *
@@ -151,6 +169,9 @@ public function testReferencedEntityChanged(array $child_map, array $updates, ar
     }
 
     $this->assertEquals($expected, $tracker->getRemainingItems());
+
+    // Make sure that no unknown items were queued for post-request indexing.
+    $this->triggerPostRequestIndexing();
   }
 
   /**
