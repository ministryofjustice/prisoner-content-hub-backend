diff --git a/config/schema/term_reference_tree.schema.yml b/config/schema/term_reference_tree.schema.yml
index d0834a449f80b26a9d9ba786015daee53bd637d9..32ee698cfa66d1500d2db66e83b8c80bf9cbe658 100644
--- a/config/schema/term_reference_tree.schema.yml
+++ b/config/schema/term_reference_tree.schema.yml
@@ -14,6 +14,9 @@ field.widget.settings.term_reference_tree:
     cascading_selection:
       type: integer
       label: 'Cascading selection'
+    cascading_selection_enforce:
+      type: boolean
+      label: 'Enforce cascading selection'
     max_depth:
       type: integer
       label: 'Maximum Depth'
diff --git a/src/Plugin/Field/FieldWidget/TermReferenceTree.php b/src/Plugin/Field/FieldWidget/TermReferenceTree.php
index c89c115ff9ee8f70441280577bde1250939ed83f..9102e22a54c6527101e010de73ca8362e1f41200 100644
--- a/src/Plugin/Field/FieldWidget/TermReferenceTree.php
+++ b/src/Plugin/Field/FieldWidget/TermReferenceTree.php
@@ -37,6 +37,7 @@ class TermReferenceTree extends WidgetBase {
         'leaves_only' => FALSE,
         'select_parents' => FALSE,
         'cascading_selection' => self::CASCADING_SELECTION_NONE,
+        'cascading_selection_enforce' => FALSE,
         'max_depth' => 0,
       ] + parent::defaultSettings();
   }
@@ -83,6 +84,19 @@ class TermReferenceTree extends WidgetBase {
       ],
     ];

+    $form['cascading_selection_enforce'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Enforce cascading selection'),
+      '#description' => $this->t('On parent selection child terms will be checked and disabled (so no further modifications can be made).  Note that disabled fields are not submitted, so only parent terms will be saved if selected.  <em>This only works with "Select / deselect" option.</em>'),
+      '#default_value' => $this->getSetting('cascading_selection_enforce'),
+      '#return_value' => 1,
+      '#states' => [
+        'visible' => [
+          ':input[name="fields[' . $this->fieldDefinition->getName() . '][settings_edit_form][settings][cascading_selection]"]' => ['value' => self::CASCADING_SELECTION_BOTH]
+        ],
+      ],
+    ];
+
     if ($this->fieldDefinition->getFieldStorageDefinition()
         ->getCardinality() !== FieldStorageConfig::CARDINALITY_UNLIMITED) {
       $form['select_parents']['#disabled'] = TRUE;
@@ -134,6 +148,10 @@ class TermReferenceTree extends WidgetBase {
       $summary[] = sprintf('%s (%s)', $this->t('Cascading selection'), $this->t('Only deselect'));
     }

+    if ($this->getSetting('cascading_selection_enforce')) {
+      $summary[] = $this->t('Enforce cascading selection');
+    }
+
     if ($this->getSetting('max_depth')) {
       $summary[] = $this->formatPlural($this->getSetting('max_depth'), 'Maximum Depth: @count level', 'Maximum Depth: @count levels');
     }
@@ -156,6 +174,7 @@ class TermReferenceTree extends WidgetBase {
     $element['#leaves_only'] = $this->getSetting('leaves_only');
     $element['#select_parents'] = $this->getSetting('select_parents');
     $element['#cascading_selection'] = $this->getSetting('cascading_selection');
+    $element['#cascading_selection_enforce'] = $this->getSetting('cascading_selection_enforce');
     $element['#value_key'] = 'target_id';
     $element['#max_depth'] = $this->getSetting('max_depth');
     $element['#start_minimized'] = $this->getSetting('start_minimized');
diff --git a/term_reference_tree.js b/term_reference_tree.js
index 864a084bbc211b9e3e85682a6531f9a74834de9d..c47a904133ea239fef8a3881d8267e08fc8bae6f 100644
--- a/term_reference_tree.js
+++ b/term_reference_tree.js
@@ -115,6 +115,7 @@ Drupal.behaviors.termReferenceTree = {
       if($(this).hasClass('term-reference-tree-cascading-selection')) {
         var mode_select = $(this).hasClass('term-reference-tree-cascading-selection-mode-select');
         var mode_deselect = $(this).hasClass('term-reference-tree-cascading-selection-mode-deselect');
+        var enforce_select = $(this).hasClass('term-reference-tree-cascading-selection-enforce');

         //Check children when checkboxes are clicked.
         $(this).find('.form-checkbox').change(function(event) {
@@ -125,10 +126,20 @@ Drupal.behaviors.termReferenceTree = {

           if (!mode_select && !mode_deselect) {
             if(event_target_checked) {
-              $(children).filter(':not(:checked)').click().trigger('change');
+              if(enforce_select) {
+                $(children).prop('checked', true).attr('disabled', 'disabled').trigger('change');
+              }
+              else {
+                $(children).filter(':not(:checked)').click().trigger('change');
+              }
             }
             else {
-              $(children).filter(':checked').click().trigger('change');
+              if(enforce_select) {
+                $(children).prop('checked', false).removeAttr('disabled').trigger('change');
+              }
+              else {
+                $(children).filter(':checked').click().trigger('change');
+              }
             }
           } else if (mode_select && event_target_checked) {
             $(children).filter(':not(:checked)').click().trigger('change');
@@ -136,6 +147,9 @@ Drupal.behaviors.termReferenceTree = {
             $(children).filter(':checked').click().trigger('change');
           }
         });
+        if(enforce_select) {
+          $(this).find('.form-checkbox').trigger('change');
+        }
         //End process checkbox changes.
       } //End Want a cascading checking.

diff --git a/term_reference_tree.module b/term_reference_tree.module
index 707acc11b5290e62f08ac4f1de314f0434a9e00e..85c41aa97bc833bb27506db9ca360acea4af9774 100644
--- a/term_reference_tree.module
+++ b/term_reference_tree.module
@@ -105,6 +105,10 @@ function template_preprocess_checkbox_tree(&$variables) {
     }
   }

+  if (!empty($variables['element']['#cascading_selection_enforce'])) {
+    $attributes['class'][] = 'term-reference-tree-cascading-selection-enforce';
+  }
+
   if (!empty($element['#attributes']['class'])) {
     $attributes['class'] = array_merge($attributes['class'], $element['#attributes']['class']);
   }
