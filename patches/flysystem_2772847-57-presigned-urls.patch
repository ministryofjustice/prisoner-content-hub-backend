diff --git a/README.md b/README.md
index 13811fc..6506070 100644
--- a/README.md
+++ b/README.md
@@ -39,7 +39,7 @@ $schemes = [
       // Optional configuration settings.

       // 'options' => [
-      //   'ACL' => 'public-read',
+      //   'ACL' => 'public-read',   // If bucket is private, set to 'private'
       //   'StorageClass' => 'REDUCED_REDUNDANCY',
       // ],

@@ -66,6 +66,12 @@ $schemes = [
       // 'public' => TRUE,                        // Set to TRUE to link to files
                                                   // using direct links.

+      // 'expires' => strtotime('+600 seconds'),  // An optional expiry timestamp
+                                                  // to use when generating
+                                                  // presigend URLs for private
+                                                  // files. Default is +3600
+                                                  // seconds (one hour).
+
       // 'cors' => TRUE,                          // Set to TRUE if CORS upload
                                                   // support is enabled for the
                                                   // bucket.
@@ -77,3 +83,12 @@ $schemes = [

 $settings['flysystem'] = $schemes;
 ```
+
+## Private ACL
+If using a bucket with a private ACL, i.e. you have set
+`$settings['flysystem']['s3']['config']['options']['ACL'] = 'private'` from above.
+You must then add the following to your settings.php file:
+```php
+$config['image.settings']['suppress_itok_output'] = TRUE;
+```
+As the itok parameter will interfere with the signature in the url.
\ No newline at end of file
diff --git a/flysystem_s3.module b/flysystem_s3.module
index 6db5014..a1f3696 100644
--- a/flysystem_s3.module
+++ b/flysystem_s3.module
@@ -5,6 +5,10 @@
  * Contains flysystem_s3.module.
  */

+use Drupal\Core\Cache\CacheableMetadata;
+use Drupal\Core\Site\Settings;
+use Drupal\Core\StreamWrapper\StreamWrapperManager;
+use Drupal\file\FileInterface;
 use Drupal\flysystem_s3\S3CorsManagedFileHelper;

 /**
@@ -13,3 +17,27 @@ use Drupal\flysystem_s3\S3CorsManagedFileHelper;
 function flysystem_s3_element_info_alter(array &$types) {
   S3CorsManagedFileHelper::alterInfo($types);
 }
+
+/**
++ * Implements hook_ENTITY_TYPE_load().
++ *
++ * Set a max-age for s3 urls that contain a time sensitive signature.
++ */
+function flysystem_s3_file_load(array $entities) {
+  foreach ($entities as $entity) {
+    assert($entity instanceof FileInterface);
+    $settings = Settings::get('flysystem');
+    $url = $entity->get('uri');
+    $scheme = StreamWrapperManager::getScheme($url->value);
+    if (isset($settings[$scheme]) && isset($settings[$scheme]['config']['expires'])) {
+      // We currently only support timestamp expiration (although the S3 api
+      // accepts other formats).
+      if (is_int($settings[$scheme]['config']['expires'])) {
+        $entity->addCacheableDependency(
+          (new CacheableMetadata())->setCacheMaxAge($settings[$scheme]['config']['expires'] - \Drupal::time()
+              ->getRequestTime())
+        );
+      }
+    }
+  }
+}
\ No newline at end of file
diff --git a/src/Flysystem/S3.php b/src/Flysystem/S3.php
index 2807c97..8a8908f 100644
--- a/src/Flysystem/S3.php
+++ b/src/Flysystem/S3.php
@@ -3,18 +3,22 @@
 namespace Drupal\flysystem_s3\Flysystem;

 use Aws\Credentials\Credentials;
-use Aws\S3\S3Client;
 use Aws\S3\Exception\S3Exception;
+use Aws\S3\S3Client;
 use Aws\S3\S3ClientInterface;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\Utility\Error;
 use Drupal\flysystem\Plugin\FlysystemPluginInterface;
 use Drupal\flysystem\Plugin\FlysystemUrlTrait;
 use Drupal\flysystem\Plugin\ImageStyleGenerationTrait;
 use Drupal\flysystem_s3\AwsCacheAdapter;
 use Drupal\flysystem_s3\Flysystem\Adapter\S3Adapter;
+use League\Flysystem\AdapterInterface;
 use League\Flysystem\Config;
+use Psr\Log\LoggerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;

 /**
@@ -38,7 +42,7 @@ class S3 implements FlysystemPluginInterface, ContainerFactoryPluginInterface {
   /**
    * The S3 client.
    *
-   * @var \Aws\S3\S3Client
+   * @var \Aws\S3\S3ClientInterface
    */
   protected $client;

@@ -63,6 +67,20 @@ class S3 implements FlysystemPluginInterface, ContainerFactoryPluginInterface {
    */
   protected $urlPrefix;

+  /**
+   * The amount of time presigned URLs are valid for, such as '+60 seconds'.
+   *
+   * @var string
+   */
+  protected $expires;
+
+  /**
+   * The system logger.
+   *
+   * @var \Psr\Log\LoggerInterface
+   */
+  protected $logger;
+
   /**
    * Whether the stream is set to public.
    *
@@ -73,19 +91,21 @@ class S3 implements FlysystemPluginInterface, ContainerFactoryPluginInterface {
   /**
    * Constructs an S3 object.
    *
-   * @param \Aws\S3\S3Client $client
+   * @param \Aws\S3\S3ClientInterface $client
    *   The S3 client.
    * @param \League\Flysystem\Config $config
    *   The configuration.
    */
-  public function __construct(S3ClientInterface $client, Config $config) {
+  public function __construct(S3ClientInterface $client, Config $config, LoggerInterface $logger) {
     $this->client = $client;
     $this->bucket = $config->get('bucket', '');
     $this->prefix = $config->get('prefix', '');
     $this->isPublic = $config->get('public', FALSE);
     $this->options = $config->get('options', []);
+    $this->expires = $config->get('expires', strtotime('+3600 seconds'));

     $this->urlPrefix = $this->calculateUrlPrefix($config);
+    $this->logger = $logger;
   }

   /**
@@ -99,7 +119,7 @@ class S3 implements FlysystemPluginInterface, ContainerFactoryPluginInterface {

     unset($configuration['key'], $configuration['secret']);

-    return new static($client, new Config($configuration));
+    return new static($client, new Config($configuration), $container->get('logger.channel.flysystem'));
   }

   /**
@@ -196,10 +216,36 @@ class S3 implements FlysystemPluginInterface, ContainerFactoryPluginInterface {

     $target = $this->getTarget($uri);

-    if (strpos($target, 'styles/') === 0 && !file_exists($uri)) {
+    if (strpos($target, 'styles/') === 0 && !$this->getAdapter()->has($target)) {
       $this->generateImageStyle($target);
     }

+    // This method can only return FALSE if the wrapper does not exist, and not
+    // if there is an error in generating the URL. If an asset is missing on S3,
+    // then the getVisibility() call will throw an exception. In that case,
+    // we log it and return an unsigned URL so we don't break the expected
+    // return or completely break the response.
+    try {
+      if ($this->options['ACL'] != 'public-read' && $this->getAdapter()->getVisibility($target)['visibility'] == AdapterInterface::VISIBILITY_PRIVATE) {
+        // Use getCommand() so we don't actually make a request yet.
+        $command = $this->client->getCommand('getObject', [
+          'Bucket' => $this->bucket,
+          'Key' => $target,
+        ]);
+        $request = $this->client->createPresignedRequest($command, $this->expires);
+
+        return (string) $request->getUri();
+      }
+    }
+    catch (S3Exception $e) {
+      // Inline watchdog_exception() so we can use it with our injected service.
+      // Use a default value if $message is not set.
+      $message = '%type: @message in %function (line %line of %file).';
+      $variables = Error::decodeException($e);
+
+      $this->logger->error($message, $variables);
+    }
+
     return $this->urlPrefix . '/' . UrlHelper::encodePath($target);
   }

